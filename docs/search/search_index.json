{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PizzaJS Docs","text":"<p>Issues Star Fork Discord</p>"},{"location":"#importing-pizzajs","title":"Importing PizzaJS","text":"<ol> <li>Download latest version from github.</li> </ol> <p>Make sure to have PizzaJS files as the <code>template/project</code> as an alternative use the template for your project provided in github at <code>template/project</code></p> <p>Example</p> <pre><code>My_PizzaJS_Project/\n\u2502\n\u251c\u2500\u2500 index.html\n\u2502\n\u251c\u2500\u2500 main.js\n\u2502\n\u2514\u2500\u2500 source/\n    \u2502\n    \u251c\u2500\u2500 modules/\n    \u2502   \u2502\n    \u2502   \u251c\u2500\u2500 classes.js\n    \u2502   \u2502\n    \u2502   \u251c\u2500\u2500 functions.js\n    \u2502   \u2502\n    \u2502   \u2514\u2500\u2500 global.js\n    \u2502   \u2502\n    \u2502   \u2514\u2500\u2500 index.js\n    \u2502   \u2502\n    \u2502   \u2514\u2500\u2500 listener.js\n</code></pre> <pre><code>// Use `pjs` or anything as a prefix for PizzaJS\n\n// import all\nimport * as pjs from \"/source/modules/index.js\"\n</code></pre> <pre><code>// Use PizzaJS without a prefix\n// Import global and image\nimport { global, image } from '/source/modules/global.js'\n// Import functions\nimport { initLoaderCheck, canvas, ctx, drawtext, loadImage, loadSound, loadFont, fillRect, setup, start, clear, fitText, measureTextWidth } from '/source/modules/functions.js';\n// Import listeners\nimport { setupAllEventListeners, setupMouseListener, setupResizeListener, setupKeyboardListener, keyPressed, mouse, pressedKeys } from '/source/modules/listener.js';\n// Import all classes\nimport { actor, button, hitbox, hitbox2, rect, sound, slider } from '/source/modules/classes.js';\n\n// Starts the loadCheck\ninitLoaderCheck()\n</code></pre>"},{"location":"#global-object","title":"Global object","text":"Attributes Description <code>version</code> Holds the current version in a string <code>build</code> Current build <code>debug</code> Just as a feature. No class has any special atribute when its true. <code>actors</code> An array with all the actors. <code>buttons</code> An array with all the buttons. <code>hasLoaded</code> Indicator that tells if all assets where loaded. <code>toLoad</code> A number that show how many things it has to load. <code>Loaded</code> A number that show how many things loaded. <code>loadingTime</code> Default max loading time. <code>hasSetup</code> A boolean that indicates if it has been already setted up. <code>setupWidth</code> Width of the canvas when it was setted up <code>setupHeight</code> Height of the canvas when it was setted up <code>lastTimestamp</code> Used for deltaTime calculation. <code>deltaTime</code> Current deltaTime. <code>_ImagesLoadedURL_</code> All images loaded using loadImage(); <code>_SoundsLoadedURL_</code> All sounds loaded using loadSound(); <code>errors</code> A set that has all current errors in PizzaJS <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1);\n\nconsole.log(pjs.global.setupWidth);\n</code></pre> <p>Output: <code>1920</code></p>"},{"location":"#how-to-use-color-code-format","title":"How to use color code format","text":"<p>On classes instead of putting an image, color can by used by simply adding <code>color:</code> before the color wether is on hex, rgb, rgba, etc.</p> <p>Example</p> <p><pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1);\n\nlet size = 128\nlet x = pjs.canvas.width / 2 - size/2\nlet y = pjs.canvas.height / 2 - size/2\n\nlet actor = new pjs.actor(\"color:#FF0000\", [x, y], [size, size], [0, 0])\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    pjs.clear()\n    actor.draw()\n})\n\npjs.start()\n</code></pre> </p>"},{"location":"#using-radius-and-stroke-property","title":"Using radius and stroke property","text":"<p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\npjs.setup(500, 500, 1);\npjs.loadFont(\"FiraCode\", \"/source/fonts/FiraCode/FiraCode-Regular.ttf\")\n\nlet actor = new pjs.actor(undefined, [32, 114], [50, 50], [0, 0])\n\nlet button = new pjs.button(\"color: #000000\", [26, 32], [128, 50], \"Click\", \"#FFFFFF\", 25, 500)\n\nlet slider = new pjs.slider(\"color: #000000\", \"color: #7b7b7b\", [186, 32], [128, 50], 50, [0, 100], \"#FFFFFF\", 50)\n\nactor.stroke.active = true\nactor.stroke.color = \"#FF00FF\"\nactor.stroke.width = 2\nactor.radius = [25, 5, 5, 25]\n\nbutton.stroke.active = true\nbutton.stroke.width = 2\nbutton.radius = 5\n\nslider.stroke.active = true\nslider.stroke.width = 2\nslider.radius = 5\n\nslider.thumb.stroke.active = true\nslider.thumb.stroke.width = 2\nslider.thumb.stroke.color = \"#000000\"\nslider.thumb.radius = 25\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    pjs.clear()\n    actor.draw()\n    button.draw()\n    slider.draw()\n})\npjs.start()\n</code></pre> <p></p>"},{"location":"addons/DefaultScreenshot/","title":"DefaultScreenshot","text":"<p>Adds a background to take screenshots using right click and open image in new tab <pre><code>import \"./source/Addons/DefaultScreenshot.js\"\n</code></pre></p> <p>With addon </p> <p>Without addon </p>"},{"location":"addons/miniMonitor/","title":"MiniMontior","text":"<p>An overlay that draws using <code>pjsAfterClear</code>. Shows fps and deltaTime <pre><code>import \"./source/Addons/miniMonitor.js\"\n</code></pre> </p>"},{"location":"addons/particle/","title":"Particle","text":""},{"location":"addons/particle/#particle-creator-httpsjoaquinlarrocagithubiopizzajs-particle-creator","title":"Particle Creator: https://joaquinlarroca.github.io/PizzaJS-particle-creator/","text":"<pre><code>import * as p from \"./source/Addons/particle.js\"\n</code></pre>"},{"location":"addons/particle/#particle","title":"Particle","text":"<p>Represents an individual particle in the system.</p> <pre><code>new Particle(x, y, size, color, speedX, speedY, lifespan, alphaReducer)\n</code></pre> Parameters Type Description Default Value x <code>number</code> X-coordinate of the particle - y <code>number</code> Y-coordinate of the particle - size <code>number</code> Size of the particle - color <code>string</code> Color of the particle (CSS format) - speedX <code>number</code> Horizontal speed of the particle - speedY <code>number</code> Vertical speed of the particle - lifespan <code>number</code> Lifespan of the particle - alphaReducer <code>number</code> Alpha reduction rate over time -"},{"location":"addons/particle/#methods","title":"Methods","text":""},{"location":"addons/particle/#update","title":"update()","text":"<p>Updates the particle's position, alpha, and lifespan based on time.</p>"},{"location":"addons/particle/#draw","title":"draw()","text":"<p>Draws the particle on the canvas.</p>"},{"location":"addons/particle/#particlegenerator-class","title":"ParticleGenerator Class","text":"<p>Manages a collection of particles. Constructor</p> <pre><code>new ParticleGenerator(x, y, particleCount, sizeRange, color, speedY, speedX, lifespanRange, alphaReducer)\n</code></pre> Parameters Type Description Default Value x <code>number</code> X-coordinate of the particle generator - y <code>number</code> Y-coordinate of the particle generator - particleCount <code>number</code> Number of particles to generate - sizeRange <code>number</code> Range of particle sizes - color <code>string</code> Color of the particles (CSS format) - speedX <code>number</code> Horizontal speed range of particles - speedY <code>number</code> Vertical speed range of particles - lifespanRange <code>number</code> Range of lifespans for particles - alphaReducer <code>number</code> Alpha reduction rate over time -"},{"location":"addons/particle/#methods_1","title":"Methods","text":""},{"location":"addons/particle/#update_1","title":"update()","text":"<p>Updates the state of all particles within the generator.</p>"},{"location":"addons/particle/#draw_1","title":"draw()","text":"<p>Draws all particles within the generator on the canvas.</p>"},{"location":"classes/actor/","title":"Actor","text":"Parameters Type Description Default Value string <code>string</code> Image URL or color code format. PizzaJS Logo [x, y] <code>number[]</code> The top left position of the actor in pixels. [0, 0] [width, height] <code>number[]</code> The width and height of the actor in pixels. [32, 32] [offsetX, offsetY] <code>number[]</code> The offsets used for positioning the actor. [0, 0]"},{"location":"classes/actor/#attributes","title":"Attributes","text":"Attributes Description <code>image</code> Holds the image object if an image source is provided. <code>usingColor</code> Indicates whether the actor is using a color instead of an image. <code>color</code> Holds the color value if the actor is using a color. <code>conditions</code> Object holding various conditions for the actor. <code>x, y</code> Current position of the actor. <code>offsetX, offsetY</code> Offsets used for positioning. <code>drag</code> Object for handling dragging functionality. <code>hitbox</code> Hitbox object for collision detection. <code>width, height</code> Dimensions of the actor. <code>halfwidth, halfheight</code> Half of the width and height of the actor. <code>pos</code> Position coordinates of the actor. <code>anglex, angley</code> Position coordinates used for angle calculations. <code>angle</code> Angle of rotation for the actor (in degrees). <code>alpha</code> Transparency of the actor. <code>radius</code> The amount of rounding corners use array for changing independently each corner or a number to change all corners. <code>stroke.active</code> A boolean flag indicating whether the stroke (outline) should be active or not. <code>stroke.color</code> A string representing the color of the stroke in hexadecimal, RGB, or other supported formats. <code>stroke.width</code> A numerical value representing the width of the stroke in pixels. <code>left, right, top, bottom</code> Boundaries of the actor. <code>global.actors</code> Adds the object to global.actors for addons"},{"location":"classes/actor/#methods","title":"Methods","text":""},{"location":"classes/actor/#draw","title":"draw()","text":"<p>The draw() method is responsible for rendering the actor onto the canvas based on its current properties.</p> <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1);\n\nlet size = 256\nlet x = pjs.canvas.width / 2 - size/2\nlet y = pjs.canvas.height / 2 - size/2\n\nlet MyActor = new pjs.actor(\"/source/icons/PizzaJS256x.png\", [x, y], [size, size], [0, 0])\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    pjs.clear()\n    MyActor.draw() \n})\n\npjs.start()\n</code></pre> <p></p>"},{"location":"classes/actor/#drawanchorpoint","title":"<code>drawAnchorPoint()</code>","text":"<p>The drawAnchorPoint() method renders an anchor point for the actor on the canvas. (anchor point is from where the actor rotates)</p> <p>Tip</p> <p>Anchor Point can be offseted with offsetX, offsetY</p> <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1);\n\nlet size = 256\nlet x = pjs.canvas.width / 2 - size/2\nlet y = pjs.canvas.height / 2 - size/2\n\nlet MyActor = new pjs.actor(\"/source/icons/PizzaJS256x.png\", [x, y], [size, size], [0, 0])\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    pjs.clear()\n    MyActor.draw()\n    MyActor.drawAnchorPoint() // Draw the actor anchor point\n})\n\npjs.start()\n</code></pre> <p></p>"},{"location":"classes/actor/#angletopointpoint","title":"<code>angletopoint(point)</code>","text":"<p>The method determines the angle between the actor's current position and the specified target point and makes the actor angle toward the point, considering the actor's center as the reference except there is an offset.</p> Parameters Type Description Default Value point <code>number[]</code> The pos of the point -"},{"location":"classes/actor/#changeimagestring","title":"<code>changeImage(string)</code>","text":"<p>Changes the image/color of the actor.</p> Parameters Type Description Default Value string <code>string</code> Image URL or color code format. -"},{"location":"classes/actor/#growx-y","title":"<code>grow(x, y)</code>","text":"<p>Increases or decreases the size of the actor.</p> Parameters Type Description Default Value x <code>number</code> Amount by which to increase width - y <code>number</code> Amount by which to increase height -"},{"location":"classes/button/","title":"Button","text":"Parameters Type Description Default Value string <code>string</code> Image URL or color code format. PizzaJS Logo [x, y] <code>number[]</code> The top left position of the actor in pixels. [0, 0] [width, height] <code>number[]</code> The width and height of the actor in pixels. [32, 32] text <code>string</code> The text of the button, if undefined it will be disabled. \"Button\" textColor <code>string</code> The color of the text \"#FFFFFF\" textMargin <code>number</code> The margin of the text 0 timeoutMS <code>number</code> The time it takes for the button to be able to be pressed again . 0"},{"location":"classes/button/#attributes","title":"Attributes","text":"Attributes Description <code>image</code> Holds the image object if an image source is provided. <code>usingColor</code> Indicates whether the actor is using a color instead of an image. <code>color</code> Holds the color value if the actor is using a color. <code>x, y</code> Current position of the actor. <code>width, height</code> Dimensions of the actor. <code>halfwidth, halfheight</code> Half of the width and height of the actor. <code>pos</code> Position coordinates of the actor. <code>desiredWidth, desiredHeight</code> The desired width and height for the text Formula: <code>width - margin</code> and <code>height - margin</code> <code>text</code> Object for handling text functionality. <code>drag</code> Object for handling dragging functionality. <code>click</code> Boolean that indicates if its being clicked. <code>hover</code> Boolean that indicates if its being hovered. <code>hitbox</code> Hitbox object for collision detection. <code>anglex, angley</code> Position coordinates used for angle calculations. <code>angle</code> Angle of rotation for the actor (in degrees). <code>alpha</code> Transparency of the actor. <code>radius</code> The amount of rounding corners use array for changing independently each corner or a number to change all corners. <code>stroke.active</code> A boolean flag indicating whether the stroke (outline) should be active or not. <code>stroke.color</code> A string representing the color of the stroke in hexadecimal, RGB, or other supported formats. <code>stroke.width</code> A numerical value representing the width of the stroke in pixels. <code>left, right, top, bottom</code> Boundaries of the actor. <code>timeout</code> The timeout in ms <code>canClickDueTimeout</code> Boolean that stays true if it can be clicked if not it stays false <code>global.buttons</code> Adds the object to global.buttons for addons"},{"location":"classes/button/#methods","title":"Methods","text":""},{"location":"classes/button/#draw","title":"draw()","text":"<p>The draw() method is responsible for rendering the button onto the canvas based on its current properties.</p> <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1);\n\nlet size = 256\nlet x = pjs.canvas.width / 2 - size\nlet y = pjs.canvas.height / 2 - size / 2\n\nlet MyButton = new pjs.button(\"color: #000000\", [x, y], [size * 2, size], \"My Button\", \"#FFFFFF\", size * 0.5, 500)\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    pjs.clear()\n    MyButton.draw()\n\n    // Change color if hovered\n    //if (MyButton.hover) {\n    //    MyButton.color = \"#FF0000\"\n    //}\n    //else {\n    //    MyButton.color = \"#000000\"\n    //}\n\n    // Indicate when the button is able to be pressed again\n    //if(MyButton.canClickDueTimeout){\n    //    pjs.ctx.fillStyle = \"#00FF00\"\n    //    pjs.drawtext(\"Can Click\",[0,0],size*0.45)\n    //}\n    //else{\n    //    pjs.ctx.fillStyle = \"#FF0000\"\n    //    pjs.drawtext(\"Timeout\",[0,0],size*0.45)\n    //}\n\n})\n\npjs.start()\n</code></pre> <p></p>"},{"location":"classes/button/#change","title":"<code>change()</code>","text":"<p>The change() method changes the text and fits it to the button with a provided font and text</p> <p>Failure</p> <p>change() uses fitext that doens't properly fit text in some cases.</p> Parameters Type Description Default Value text <code>string</code> The text to be changed - fontFamily <code>string</code> The fontFamily that is goind to be changed - <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1);\n\nlet size = 256\nlet x = pjs.canvas.width / 2 - size\nlet y = pjs.canvas.height / 2 - size / 2\n\nlet MyButton = new pjs.button(\"color: #000000\", [x, y], [size * 2, size], \"My Button\", \"#FFFFFF\", size * 0.5, 500);\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    pjs.clear()\n    MyButton.draw()\n\n    if (MyButton.click) {\n        if (MyButton.text.text == \"My Button\") {\n            MyButton.change(\"Super Button\", \"sans-serif\")\n        }\n        else {\n            MyButton.change(\"My Button\", \"sans-serif\")\n        }\n    }\n\n})\n\npjs.start()\n</code></pre> <p></p> <p></p>"},{"location":"classes/button/#changeimagestring","title":"<code>changeImage(string)</code>","text":"<p>Changes the image/color of the button.</p> Parameters Type Description Default Value string <code>string</code> Image URL or color code format. -"},{"location":"classes/button/#growx-y","title":"<code>grow(x, y)</code>","text":"<p>Increases or decreases the size of the button.</p> Parameters Type Description Default Value x <code>number</code> Amount by which to increase width - y <code>number</code> Amount by which to increase height -"},{"location":"classes/hitbox/","title":"Hitbox","text":"Parameters Type Description Default Value that <code>object</code> An object that has x, y, width and height. - multiplier <code>number</code> Indicates the scale of the hitbox 0 being 100% and 1 being 0%. 0 color <code>string</code> The color of the hitbox. undefined offsetX <code>number</code> The horizontal offset for positioning the hitbox. 0 offsetY <code>number</code> The vertical offset for positioning the hitbox. 0 <p>Note</p> <p>If color is <code>undefined</code> it will be randomized</p>"},{"location":"classes/hitbox/#attributes","title":"Attributes","text":"Attributes Description <code>that</code> Holds the image object if an image source is provided. <code>multiplier</code> Indicates the scale of the hitbox. <code>offsetX</code> The horizontal offset used for positioning the hitbox. <code>offsetY</code> The vertical offset used for positioning the hitbox. <code>color</code> The color of the hitbox. <code>lineWidth</code> The width of the stroke for drawing the hitbox. <code>params</code> Object for handling update instructions."},{"location":"classes/hitbox/#methods","title":"Methods","text":""},{"location":"classes/hitbox/#draw","title":"<code>draw()</code>","text":"<p>Renders the hitbox onto the canvas.</p>"},{"location":"classes/hitbox/#updatedimensions","title":"<code>updateDimensions()</code>","text":"<p>Updates the dimensions of the hitbox.</p>"},{"location":"classes/hitbox/#collidehitbox","title":"<code>collide(hitbox)</code>","text":"<p>Checks collision between two hitboxes. If they are colliding returns <code>true</code> else returns <code>false</code></p> Parameters Type Description Default Value hitbox <code>object</code> The hitbox object -"},{"location":"classes/hitbox/#collide2hitbox","title":"<code>collide2(hitbox)</code>","text":"<p>Checks collision between hitbox and hitbox 2. </p> Parameters Type Description Default Value hitbox <code>object</code> The hitbox2 object -"},{"location":"classes/hitbox/#collidepointpoint","title":"<code>collidepoint(point)</code>","text":"<p>Checks collision with a single point. </p> Parameters Type Description Default Value point <code>number[]</code> An array containing x and y of the point -"},{"location":"classes/hitbox2/","title":"Hitbox2","text":"Parameters Type Description Default Value x <code>number</code> x position for the hitbox undefined y <code>number</code> y position for the hitbox undefined width <code>number</code> width of the hitbox undefined height <code>number</code> height of the hitbox undefined <p>Note</p> <p>Color is randomized, but can be changed.</p>"},{"location":"classes/hitbox2/#attributes","title":"Attributes","text":"Attributes Description <code>color</code> The color of the hitbox. <code>lineWidth</code> The width of the stroke for drawing the hitbox. <code>params</code> Object for handling update instructions."},{"location":"classes/hitbox2/#methods","title":"Methods","text":""},{"location":"classes/hitbox2/#draw","title":"<code>draw()</code>","text":"<p>Renders the hitbox onto the canvas.</p>"},{"location":"classes/hitbox2/#updatedimensions","title":"<code>updateDimensions()</code>","text":"<p>Updates the dimensions of the hitbox.</p>"},{"location":"classes/hitbox2/#collidehitbox","title":"<code>collide(hitbox)</code>","text":"<p>Checks collision between hitbox2 and hitbox. If they are colliding returns <code>true</code> else returns <code>false</code></p> Parameters Type Description Default Value hitbox <code>object</code> The hitbox object -"},{"location":"classes/hitbox2/#collide2hitbox","title":"<code>collide2(hitbox)</code>","text":"<p>Checks collision between hitbox2 and hitbox2. </p> Parameters Type Description Default Value hitbox <code>object</code> The hitbox2 object -"},{"location":"classes/hitbox2/#collidepointpoint","title":"<code>collidepoint(point)</code>","text":"<p>Checks collision with a single point. </p> Parameters Type Description Default Value point <code>number[]</code> An array containing x and y of the point -"},{"location":"classes/rect/","title":"Rect","text":"Parameters Type Description Default Value [x, y] <code>number[]</code> The top left position of the actor in pixels. [0, 0] [width, height] <code>number[]</code> The width and height of the actor in pixels. [32, 32] color <code>string</code> color undefined <p>Note</p> <p>If color is <code>undefined</code> it will be randomized</p>"},{"location":"classes/rect/#attributes","title":"Attributes","text":"Attributes Description <code>color</code> Holds the color value if the actor is using a color. <code>x, y</code> Current position of the actor. <code>hitbox</code> Hitbox object for collision detection. <code>width, height</code> Dimensions of the actor. <code>halfwidth, halfheight</code> Half of the width and height of the actor. <code>pos</code> Position coordinates of the actor. <code>anglex, angley</code> Position coordinates used for angle calculations. <code>angle</code> Angle of rotation for the actor (in degrees). <code>alpha</code> Transparency of the actor."},{"location":"classes/rect/#methods","title":"Methods","text":""},{"location":"classes/rect/#draw","title":"draw()","text":"<p>The draw() method is responsible for rendering the rect onto the canvas based on its current properties.</p> <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1);\n\nlet size = 256\nlet x = pjs.canvas.width / 2 - size/2\nlet y = pjs.canvas.height / 2 - size/2\n\nlet Myrect = new pjs.rect([x, y], [size, size], \"#FF00FF\")\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    pjs.clear()\n    Myrect.draw()\n})\n\npjs.start()\n</code></pre> <p></p>"},{"location":"classes/slider/","title":"Slider","text":"Parameters Type Description Default Value background <code>string</code> Image URL or color code representing the background of the slider. PizzaJS Logo thumb <code>string</code> Image URL or color code representing the thumb. PizzaJS Logo [x, y] <code>number[]</code> Top left position of the slider in pixels. [0, 0] [width, height] <code>number[]</code> Width and height of the slider in pixels. [64, 16] thumbwidth <code>number</code> Width of the thumb. 16 [minpercentage, maxpercentage] <code>number[]</code> Minimum and maximum percentage values for the slider. [0, 100] sliderFill <code>string</code> Color code representing the fill color of the slider. #00FF00 currentPercentage <code>number</code> The initial percentage value of the slider. 0 Attributes Description <code>background</code> Holds the background image. <code>usingColor1</code> Indicates whether is using a color instead of an image in background. <code>color1</code> Holds the color value of the slider background if is using a color. <code>thumb.image</code> Holds the thumb image <code>thumb.usingColor</code> Indicates whether is using a color instead of an image for the thumb. <code>thumb.color</code> Holds the color value of the slider thumb if is using a color. <code>x, y</code> Current position of the slider. <code>thumb.x, thumb.y</code> Current position of the thumb. <code>thumb.height</code> Height of the thumb <code>thumb.width</code> Width of the thumb <code>maxpercentage</code> The maximum percentage the slider can reach. <code>minpercentage</code> The minimum percentage the slider can reach. <code>percentage</code> Current percentage the slider is in. <code>drag</code> Object for handling dragging functionality. <code>hitbox</code> Hitbox object for collision detection. <code>width, height</code> Dimensions of the slider. <code>pos</code> Position coordinates. <code>anglex, angley</code> Position coordinates used for angle calculations. <code>angle</code> Angle of rotation for the slider (in degrees). <code>alpha</code> Transparency of the actor. <code>radius</code> The amount of rounding corners use array for changing independently each corner or a number to change all corners. <code>stroke.active</code> A boolean flag indicating whether the stroke (outline) should be active or not. <code>stroke.color</code> A string representing the color of the stroke in hexadecimal, RGB, or other supported formats. <code>stroke.width</code> A numerical value representing the width of the stroke in pixels. <code>thumb.radius</code> The amount of rounding corners use array for changing independently each corner or a number to change all corners. <code>thumb.stroke.active</code> A boolean flag indicating whether the stroke (outline) should be active or not. <code>thumb.stroke.color</code> A string representing the color of the stroke in hexadecimal, RGB, or other supported formats. <code>thumb.stroke.width</code> A numerical value representing the width of the stroke in pixels. <code>left, right, top, bottom</code> Boundaries of the actor. <code>click</code> Boolean that indicates if the thumb is being clicked. <code>hover</code> Boolean that indicates if the thumb is being hovered. <code>thumb.blocked</code> Boolean that blocks movement if its true"},{"location":"classes/slider/#methods","title":"Methods","text":""},{"location":"classes/slider/#draw","title":"draw()","text":"<p>The draw() method is responsible for rendering the slider onto the canvas based on its current properties.</p> <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1);\n\nlet size = 256\nlet x = pjs.canvas.width / 2 - size\nlet y = pjs.canvas.height / 2 - size/4\n\nlet MySlider = new pjs.slider(\"color:#000000\", \"color:#FFFFFF\", [x, y], [size*2, size/2], size/4, [0, 100],\"#FF0000\", 50)\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    pjs.clear()\n    MySlider.draw()\n\n    // Show current percentage\n    pjs.drawtext(MySlider.percentage,[0,0],size/4)\n})\n\npjs.start()\n</code></pre> <p>Untouched</p> <p></p> <p>Moved</p> <p></p>"},{"location":"classes/slider/#changeimagestringbackground-stringthumb","title":"<code>changeImage(stringbackground, stringthumb)</code>","text":"<p>Changes the image/color of the slider.</p> Parameters Type Description Default Value stringbackground <code>string</code> Image URL or color code representing the background. - stringthumb <code>string</code> Image URL or color code representing the thumb -"},{"location":"classes/sound/","title":"Sound","text":"<p>url, playbackRate = 1.0, volume = 1.0, loop = false</p> Parameters Type Description Default Value url <code>string</code> Sound URL - playbackRate <code>number</code> Play back rate. 1.0 volume <code>number</code> The volume of the sound 1.0 loop <code>boolean</code> Wheter it loop or not [0, 0]"},{"location":"classes/sound/#attributes","title":"Attributes","text":"Attributes Description <code>sound</code> An Audio object. <code>loop</code> Indicates whether the sound will loop. <code>playbackRate</code> Rate at which the audio will be played. <code>volume</code> Volume level of the audio. <code>ended</code> Indicates if the audio has ended. <code>duration</code> Duration of the audio in seconds. <code>currentTime</code> Current playback time of the audio. <code>paused</code> Indicates if the audio is paused."},{"location":"classes/sound/#methods","title":"Methods","text":""},{"location":"classes/sound/#play","title":"play()","text":"<p>Starts playing the audio </p>"},{"location":"classes/sound/#pause","title":"pause()","text":"<p>Pauses the audio</p>"},{"location":"classes/sound/#stop","title":"stop()","text":"<p>Stops the audio and sets the currentTime to 0</p>"},{"location":"classes/sound/#setcurrenttimeseconds","title":"setCurrentTime(seconds)","text":"<p>Sets the current time in seconds</p>"},{"location":"functions/general/","title":"General","text":""},{"location":"functions/general/#load-image","title":"Load Image","text":"<p>The <code>loadImage</code> function downloads an image from a provided URL and returns the src.</p> <pre><code>loadImage(name,url);\n</code></pre> <p>Info</p> <p>The <code>loadImage</code> function is already implemented into all classes from PizzaJS.</p> Parameters Type Description Default Value name <code>string</code> A name attached to the url accesible via image[name] - url <code>string</code> The URL pointing to the image file to be downloaded and used. - <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1);\n\nlet size = 256\nlet x = pjs.canvas.width / 2 - size/2\nlet y = pjs.canvas.height / 2 - size/2\n\n// pjs.loadImage(\"bunny,\"bunny.png\")\n// All classes that have an image or may contain one -\n// already have implemented the loadImage function.\n\nlet actor = new pjs.actor(\"bunny.png\", [x, y], [size, size], [0, 0])\n\n// Using name\n//let actor = new pjs.actor(pjs.image[\"bunny\"], [x, y], [size, size], [0, 0])\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    pjs.clear()\n    actor.draw()\n})\n\npjs.start()\n</code></pre> <p></p> <p>Bunny.png</p> <p></p>"},{"location":"functions/general/#load-sound","title":"Load Sound","text":"<p>The <code>loadSound</code> function downloads a sound from a provided URL and returns the src.</p> <pre><code>loadSound(url);\n</code></pre> <p>Info</p> <p>The <code>loadSound</code> function is already implemented into the sound class from PizzaJS.</p> Parameters Type Description Default Value url <code>string</code> The URL pointing to the sound file to be downloaded and used. \"undefined\""},{"location":"functions/general/#clear","title":"Clear","text":"<p>The <code>clear</code> function erases all things from the canvas. Additionaly it broadcast an event after clearing <code>pjsAfterClear</code>, meant for addons </p> <pre><code>clear();\n</code></pre>"},{"location":"functions/general/#fill-rect","title":"Fill Rect","text":"<p>The <code>fillRect</code> function draws a filled rect with the specified parameters.</p> <pre><code>fillRect(x, y, width, height);\n</code></pre> Parameters Type Description Default Value x <code>number</code> the x position for the rect 0 y <code>number</code> the y position for the rect 0 width <code>number</code> the width of the rect 0 height <code>number</code> the height of the rect 0 <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\n\npjs.setup(1920, 1080, 1);\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    pjs.clear();\n    pjs.ctx.fillStyle = \"red\";\n    pjs.fillRect(64,64,128,128);\n    // Draws a rect form 64,64 with a width and height of 128\n})\n\npjs.start()\n</code></pre> <p></p>"},{"location":"functions/initialize/","title":"Initialize","text":""},{"location":"functions/initialize/#setup","title":"Setup","text":"<p>The <code>setup</code> function is used to configure and set up a canvas with specific width, height, and other configurations. When executed a frame should appear on the web browser.</p> <p>If you dont want the canvas to stick to the sides of the screen add any float to reduce the size but maintaining the pixels resolution  (from 0 to 1)</p> <pre><code>setup(width, height, marginMultiplier, listeners);\n</code></pre> Parameters Type Description Default Value width <code>number</code> The width of the canvas. - height <code>number</code> The height of the canvas. - marginMultiplier <code>number</code> The multiplier for adjusting margin. 1 listeners <code>boolean</code> Boolean to determine whether to set up listeners. true <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1,true);\n</code></pre> <p></p>"},{"location":"functions/initialize/#start","title":"Start","text":"<p>The <code>start</code> function initiates the main loop.</p> <pre><code>start();\n</code></pre> <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1,true);\n\n//Main Loop\nwindow.addEventListener(\"pjsUpdate\", (e) =&gt; {\n    const { deltaTime, fps } = e.detail // Get current deltaTime and FrameRate\n    //Code\n})\n\npjs.start();\n</code></pre>"},{"location":"functions/text/","title":"Text","text":""},{"location":"functions/text/#draw-text","title":"Draw Text","text":"<p>The <code>drawtext</code> function is used to draw text on the canvas with specified parameters.</p> <pre><code>drawtext(text, [x, y], fontSize, fontFamily, baseline, textAlign, angle, alpha);\n</code></pre> Parameters Type Description Default Value text <code>string</code> The text to be drawn. \"undefined\" [x, y] <code>number[]</code> The coordinates [x, y] where the text will be drawn. [0, 0] fontSize <code>number</code> The size of the font in pixels. 24 fontFamily <code>string</code> The font family to use. \"sans-serif\" baseline <code>string</code> The text baseline: <code>\"top\"</code>, <code>\"middle\"</code>, <code>\"bottom\"</code>, or <code>\"alphabetic\"</code>. \"top\" textAlign <code>string</code> The text alignment: <code>\"start\"</code>, <code>\"end\"</code>, <code>\"left\"</code>, <code>\"right\"</code>, or <code>\"center\"</code>. \"start\" angle <code>number</code> The rotation angle of the text in degrees. 0 alpha <code>number</code> The global alpha (transparency) value, between <code>0.0</code> and <code>1.0</code>. 1.0 <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1,true);\n\n// Calculate the middle of the canvas\nlet x = pjs.canvas.width / 2;\nlet y = pjs.canvas.height / 2;\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    pjs.clear(); // Clear the canvas\n    pjs.ctx.fillStyle = \"white\"; // Change color to white\n    pjs.drawtext(\"Hello, world\", [x, y], 64, \"sans-serif\", \"middle\", \"center\", 15, 1);\n})\n\npjs.start();\n</code></pre> <p></p>"},{"location":"functions/text/#load-font","title":"Load Font","text":"<p>The loadFont function asynchronously downloads a font from a provided URL and adds it to the document's fonts using the specified font family.</p> <pre><code>loadFont(fontFamily, fontURL);\n</code></pre> Parameters Type Description Default Value fontFamily <code>string</code> The font family name to assign to the loaded font. \"undefined\" fontURL <code>string</code> The URL pointing to the font file to be downloaded and used. \"undefined\" <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1,true);\n\n//Load the font and set it as \"FiraCode\"\npjs.loadFont(\"FiraCode\",\"/source/fonts/FiraCode/FiraCode-Regular.ttf\");\n\n\nlet x = pjs.canvas.width / 2;\nlet y = pjs.canvas.height / 2;\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    pjs.clear();\n    pjs.ctx.fillStyle = \"white\";\n\n    // Change the fontFamily to FiraCode\n    pjs.drawtext(\"Hello, world\", [x, y], 64, \"FiraCode\", \"middle\", \"center\", 15, 1);\n})\n\npjs.start();\n</code></pre> <p></p>"},{"location":"functions/text/#fit-text","title":"Fit Text","text":"<p>Failure</p> <p>Doens't properly fit text in some cases.</p> <p>Tries to fit a text with the sepecified width, height and other parameters.</p> <p>Returns the fontSize tha will fit with the provided data.</p> <pre><code>fitText(text, width, height, fontFamily);\n</code></pre> Parameters Type Description Default Value text <code>string</code> The text . - width <code>number</code> The size of the max width the text can be in. - height <code>number</code> The size of the max height the text can be in. - fontFamily <code>string</code> The font family used for measuring the text. -"},{"location":"functions/text/#measure-text-width","title":"Measure Text Width","text":"<p>The measureTextWidth function calculates the width of a provided text string with a specified font size and font family.</p> <pre><code>measureTextWidth(text, fontSize, fontFamily);\n</code></pre> Parameters Type Description Default Value text <code>string</code> The text to be measured. \"undefined\" fontSize <code>number</code> The size of the font in pixels. 24 fontFamily <code>string</code> The font family used for measuring the text. \"sans-serif\""},{"location":"listeners/listeners/","title":"Listeners","text":""},{"location":"listeners/listeners/#mouse-object","title":"Mouse object","text":"variables Description <code>x</code> Indicates the mouse position in the x axis. <code>y</code> Indicates the mouse position in the y axis. <code>pos</code> An array with x and y. <code>click</code> Is true if the mouse is being clicked and its false when its not clicked. (Supports touch but no dragging) <code>objectSelected</code> It has the object / class currently selected. (To understand more read <code>template/dragTemplate.js</code>) <p>Example</p> <p><pre><code>console.log(mouse.pos);\n</code></pre> output: [125,253]</p>"},{"location":"listeners/listeners/#key-pressed","title":"Key pressed","text":"<pre><code>keyPressed(key);\n</code></pre> <p>Return true if the key given is being pressed.</p> Parameters Type Description Default Value key <code>string</code> The key you want to know if its pressed - <p>Example</p> <p><pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1);\n\nlet size = 48\nlet x = pjs.canvas.width / 2\nlet y = pjs.canvas.height / 2\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    pjs.clear()\n    if(pjs.keyPressed(\"w\")){\n        pjs.ctx.fillStyle = \"#55FF55\"\n        pjs.drawtext(\"W pressed\",[x,y],size,\"sans-serif\",\"middle\",\"center\")\n    }   \n    else{\n        pjs.ctx.fillStyle = \"#FF5555\"\n        pjs.drawtext(\"W not pressed\",[x,y],size,\"sans-serif\",\"middle\",\"center\")\n    }\n})\n\npjs.start()\n</code></pre> Not pressing W </p> <p>Pressing W </p>"},{"location":"listeners/listeners/#set-up-listeners","title":"Set up listeners","text":"<p>When putting <code>setup(1920,1080,1,false)</code> you are disabling automatic initialization of listeners. If you want to do it manually just use <code>setupAllEventListeners()</code></p> <p>Example</p> <pre><code>import * as pjs from \"/source/modules/index.js\"\n\npjs.setup(1920, 1080, 1, false);\n\npjs.setupAllEventListeners()\n\n// pjs.setupMouseListener() for setting up only the mouse.\n\n// pjs.setupKeyboardListener() for setting up only the keyboard and keyPressed function.\n\n// pjs.setupResizeListener() for setting up the automatic resize of the game when the windows is resized.\n</code></pre>"}]}