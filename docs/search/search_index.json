{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to PizzaJS Docs","text":"<p>Issues Star Fork Discord</p>"},{"location":"#importing-pizzajs","title":"Importing PizzaJS","text":""},{"location":"#1-download-latest-version-from-github","title":"1. Download latest version from github.","text":"<p>Make sure to have PizzaJS files as the <code>template/project</code> as an alternative use the template for your project provided in github at <code>template/project</code></p> <p>Example</p> <pre><code>My_PizzaJS_Project/\n\u2502\n\u251c\u2500\u2500 index.html\n\u2502\n\u251c\u2500\u2500 main.js\n\u2502\n\u2514\u2500\u2500 source/\n    \u2502\n    \u251c\u2500\u2500 modules/\n    \u2502   \u2502\n    \u2502   \u251c\u2500\u2500 classes.js\n    \u2502   \u2502\n    \u2502   \u251c\u2500\u2500 functions.js\n    \u2502   \u2502\n    \u2502   \u2514\u2500\u2500 global.js\n    \u2502   \u2502\n    \u2502   \u2514\u2500\u2500 index.js\n    \u2502   \u2502\n    \u2502   \u2514\u2500\u2500 listener.js\n</code></pre>"},{"location":"#2-use-any-importing-method","title":"2. Use any importing method","text":"<pre><code>// Use `pjs` or anything as a prefix for PizzaJS\n\n// import all\nimport * as pjs from \"/source/modules/index.js\"\n</code></pre> <pre><code>// Use PizzaJS without a prefix\n// Import global\nimport { global, image, time } from './source/modules/global.js'\n// Import functions\nimport { initLoaderCheck, lerp, canvas, ctx, drawtext, loadImage, loadSound, loadFont, fillRect, setup, start, clear, fitText, measureTextWidth, shakeScreen } from './source/modules/functions.js';\n// Import listeners\nimport { setupAllEventListeners, setupMouseListener, setupResizeListener, setupKeyboardListener, keyPressed, mouse, pressedKeys, preventKeys } from './source/modules/listener.js';\n// Import all classes\nimport { actor, button, hitbox, hitbox2, hitboxCircle, rect, sound, slider, timeout, sound2 } from './source/modules/classes.js';\n// Starts the loadCheck\ninitLoaderCheck()\n</code></pre> <p>After choosing the import method, start creating your game or project. :D</p>"},{"location":"#global-object","title":"Global object","text":"Attributes Description <code>version</code> Holds the current version in a string <code>build</code> Current build <code>debug</code> Just as a feature. No class has any special atribute when its true. <code>all</code> An array that holds all actors,sliders,buttons and rects. <code>actors</code> An array with all the actors. <code>buttons</code> An array with all the buttons. <code>sliders</code> An array with all the sliders. <code>rects</code> An array with all the rects. <code>sounds</code> An array that holds all sounds. <code>fps</code> Current fps. <code>hasLoaded</code> Indicator that tells if all assets where loaded. <code>toLoad</code> A number that show how many things it has to load. <code>Loaded</code> A number that show how many things loaded. <code>loadingTime</code> Default max loading time. <code>hasSetup</code> A boolean that indicates if it has been already setted up. <code>setupWidth</code> Width of the canvas when it was setted up <code>setupHeight</code> Height of the canvas when it was setted up <code>shakingScreen</code> Indicates if the screen is shaking <code>allListenersHadSetup</code> Indicates if all listeners had been setted up <code>mouseListenersHadSetup</code> Indicates if the mouse listener has been setted up <code>keyboardListenersHadSetup</code> Indicates if the keyboard listener has been setted up <code>resizeListenersHadSetup</code> Indicates if the resize listener has been setted up <code>_ImagesLoadedURL_</code> All images loaded using loadImage(); <code>_SoundsLoadedURL_</code> All sounds loaded using loadSound(); <code>errors</code> A set that has all current errors in PizzaJS <p>Example</p> <pre><code>import { setup, global } from \"/source/modules/index.js\"\n\nsetup(1920, 1080, 1);\n\nconsole.log(global.setupWidth);\n</code></pre> <p>Output: <code>1920</code></p>"},{"location":"#time-object","title":"Time object","text":"Attributes Description <code>delta</code> Represents the time elapsed between the current frame and the previous frame. This attribute, commonly referred to as deltaTime. <code>time</code> Each frame time.delta is added. Could be used for animations <code>scale</code> Represents a scaling factor for some operation <code>frameCount</code> How many frames it rendered since the start. <p>Example</p> <pre><code>import { setup, time, start } from \"/source/modules/index.js\"\n\nsetup(1920, 1080, 1);\n\nstart()\n\nlet timeout = setTimeout(() =&gt; {\n    console.log( Math.round( 1 / time.delta ) ); // 1 / time.delta = FPS\n}, 100);\n</code></pre> <p>Output: <code>60</code></p>"},{"location":"#events","title":"Events","text":""},{"location":"#pjsupdate","title":"pjsUpdate","text":"<ul> <li><code>Trigger:</code> This event is triggered after the start() function is called. And calls itself each frame</li> <li><code>Purpose:</code> It indicates update or initialization process has taken place.</li> </ul>"},{"location":"#pjsafterupdate","title":"pjsAfterUpdate","text":"<ul> <li><code>Trigger:</code> This event occurs after the pjsUpdate event.</li> <li><code>Purpose:</code> Made for drawing on top of what is drawn on <code>pjsUpdate</code> generally used for Addons.</li> </ul>"},{"location":"#pjsafterclear","title":"pjsAfterClear","text":"<ul> <li><code>Trigger:</code> This event is triggered after calling the clear() function.</li> <li><code>Purpose:</code> Made for drawing before <code>pjsUpdate</code> generally used for Addons.</li> </ul>"},{"location":"#how-to-use-color-code-format","title":"How to use color code format","text":"<p>On classes instead of putting an image, color can by used by simply adding <code>color:</code> before the color wether is on hex, rgb, rgba, etc.</p> <p>Example</p> <p><pre><code>import { start, setup, clear, canvas, actor } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 0.9);\n\nlet size = 128\nlet x = canvas.width / 2 - size/2\nlet y = canvas.height / 2 - size/2\n\nlet actor1 = new actor(\"color:#FF0000\", [x, y], [size, size], [0, 0])\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear()\n    actor1.draw()\n})\n\nstart()\n</code></pre> </p>"},{"location":"#using-radius-and-stroke-property","title":"Using radius and stroke property","text":"<p>Example</p> <pre><code>import { start, setup, clear, button, slider, actor } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\nsetup(500, 500, 1);\n\nlet actora = new actor(undefined, [32, 114], [50, 50], [0, 0])\n\nlet buttona = new button(\"color: #000000\", [26, 32], [128, 50], \"Click\", \"sans-serif\", \"#FFFFFF\", 25, 500)\n\nlet slidera = new slider(\"color: #000000\", \"color: rgb(122.5,122.5,122.5)\", [186, 32], [128, 50], 40, [0, 100], \"#FFFFFF\", 50)\n\nactora.stroke.active = true\nactora.stroke.color = \"#FF00FF\"\nactora.stroke.width = 2\nactora.radius = [25, 5, 5, 25]\n\nbuttona.stroke.active = true\nbuttona.stroke.width = 2\nbuttona.radius = 5\n\nslidera.stroke.active = true\nslidera.stroke.width = 2\nslidera.radius = 5\n\nslidera.thumb.stroke.active = true\nslidera.thumb.stroke.width = 10\nslidera.thumb.stroke.color = \"#000000\"\nslidera.thumb.radius = 25\nslidera.thumb.height = 40\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear()\n    actora.draw()\n    buttona.draw()\n    slidera.draw()\n})\nstart()\n</code></pre> <p></p>"},{"location":"#licenses","title":"Licenses","text":""},{"location":"#pizzajs-license","title":"PizzaJS license","text":"<pre><code>MIT License\n\nCopyright (c) 2024 Joaquin Larroca\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"#buttonsjs","title":"buttons.js","text":"<p>This page uses a modified version of github buttons.js. Modified version is located in <code>pizzajs/mkdocs/social-buttons.js</code>. Original version at https://github.com/buttons/github-buttons/blob/main/dist/buttons.js.</p> <pre><code>BSD 2-Clause License\n\nCopyright (c) 2023, \u306a\u3064\u304d\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n</code></pre>"},{"location":"addons/DefaultScreenshot/","title":"DefaultScreenshot","text":"<p>Adds a background with the same color as the canvas (canvas.style.backgroundColor) to take screenshots using right click and open image in new tab <pre><code>import \"./source/Addons/DefaultScreenshot.js\"\n</code></pre></p> <p>With addon </p> <p>Without addon </p>"},{"location":"addons/localstorage/","title":"LocalStorage","text":"<p>Save data to localStorage <pre><code>import { localStorageGet, localStorageSet } from './source/Addons/localstorage.js';\n</code></pre></p>"},{"location":"addons/localstorage/#set","title":"Set","text":"<p>Saves one value with a specified name. Returns <code>value</code></p> <pre><code>localStorageSet(name,value)\n</code></pre> Parameters Type Description Default Value name <code>string</code> The name of the value - value <code>all types</code> The value to be saved -"},{"location":"addons/localstorage/#get","title":"Get","text":"<p>Gets the value from the specified name. Returns <code>false</code> if it doesnt exist if it exists returns value</p> <pre><code>localStorageGet(name)\n</code></pre> Parameters Type Description Default Value name <code>string</code> The name of the value -"},{"location":"addons/miniMonitor/","title":"MiniMontior","text":"<p>An overlay that draws using <code>pjsAfterUpdate</code>. Shows fps and deltaTime when holding \"k\" <pre><code>import \"./source/Addons/miniMonitor.js\"\n</code></pre> </p>"},{"location":"addons/mouseInfo/","title":"MouseInfo","text":"<p>An overlay that draws all mouse information using <code>pjsAfterUpdate</code>. Shows mouse pos, object dragging and click <pre><code>import \"./source/Addons/mouseInfo.js\"\n</code></pre></p> POS OBJECT SELECTED CLICKING 0,0 false,None false <p></p>"},{"location":"addons/particle/","title":"Particle","text":"<p>Particle Creator (Beta v1.1): https://joaquinlarroca.github.io/PizzaJS-particle-creator/</p> <pre><code>import { ParticleGenerator, Particle } from \"./source/Addons/particle.js\"\n</code></pre>"},{"location":"addons/particle/#particle","title":"Particle","text":"<p>Represents an individual particle in the system.</p> <pre><code>new Particle(x, y, size, color, speedX, speedY, lifespan, alphaReducer)\n</code></pre> Parameters Type Description Default Value x <code>number</code> X-coordinate of the particle - y <code>number</code> Y-coordinate of the particle - size <code>number</code> Size of the particle - color <code>string</code> Color of the particle (CSS format) - speedX <code>number</code> Horizontal speed of the particle - speedY <code>number</code> Vertical speed of the particle - lifespan <code>number</code> Lifespan of the particle - alphaReducer <code>number</code> Alpha reduction rate over time -"},{"location":"addons/particle/#methods","title":"Methods","text":""},{"location":"addons/particle/#update","title":"update()","text":"<p>Updates the particle's position, alpha, and lifespan based on time.</p>"},{"location":"addons/particle/#draw","title":"draw()","text":"<p>Draws the particle on the canvas.</p>"},{"location":"addons/particle/#particlegenerator-class","title":"ParticleGenerator Class","text":"<p>Manages a collection of particles. Constructor</p> <pre><code>new ParticleGenerator(x, y, particleCount, sizeRange, color, speedY, speedX, lifespanRange, alphaReducer)\n</code></pre> Parameters Type Description Default Value x <code>number</code> X-coordinate of the particle generator - y <code>number</code> Y-coordinate of the particle generator - particleCount <code>number</code> Number of particles to generate - sizeRange <code>number</code> Range of particle sizes - color <code>string</code> Color of the particles (CSS format) - speedX <code>number</code> Horizontal speed range of particles - speedY <code>number</code> Vertical speed range of particles - lifespanRange <code>number</code> Range of lifespans for particles - alphaReducer <code>number</code> Alpha reduction rate over time -"},{"location":"addons/particle/#methods_1","title":"Methods","text":""},{"location":"addons/particle/#update_1","title":"update()","text":"<p>Updates the state of all particles within the generator.</p>"},{"location":"addons/particle/#draw_1","title":"draw()","text":"<p>Draws all particles within the generator on the canvas.</p>"},{"location":"classes/actor/","title":"Actor","text":"<pre><code>new actor(string, [x, y], [width, height], [offsetX, offsetY])\n</code></pre> Parameters Type Description Default Value string <code>string</code> Image URL or color code format. \"color: #FFFFFF\" [x, y] <code>number[]</code> The top left position of the actor in pixels. [0, 0] [width, height] <code>number[]</code> The width and height of the actor in pixels. [32, 32] [offsetX, offsetY] <code>number[]</code> The offsets used for positioning the actor. [0, 0]"},{"location":"classes/actor/#attributes","title":"Attributes","text":"Attributes Description <code>image</code> Holds the image object if an image source is provided. <code>usingColor</code> Indicates whether the actor is using a color instead of an image. <code>color</code> Holds the color value if the actor is using a color. <code>conditions</code> Object holding various conditions for the actor. <code>conditions.canExitCanvas</code> Tells wether the actor can leave the canvas or not. default: true <code>conditions.isDraggable</code> Whether you can drag it or not. default: false <code>scale</code> The scale of the actor in an array x: [0], y: [1]. <code>x, y</code> Current position of the actor. <code>offsetX, offsetY</code> Offsets used for positioning. <code>drag</code> Object for handling dragging functionality. More info at <code>template/drag</code> in github. <code>hitbox</code> Hitbox object for collision detection. <code>width, height</code> Dimensions of the actor. <code>halfwidth, halfheight</code> Half of the width and height of the actor. <code>pos</code> Position coordinates of the actor in an array x: [0], y: [1]. <code>anglex, angley</code> Position coordinates used for positioning calculations. Has nothing in common with angle ! <code>angle</code> Angle of rotation for the actor (in degrees). <code>alpha</code> Transparency of the actor. <code>radius</code> The amount of rounding corners use array for changing independently each corner or a number to change all corners. <code>stroke.active</code> A boolean flag indicating whether the stroke (outline) should be active or not. <code>stroke.color</code> A string representing the color of the stroke in hexadecimal, RGB, or other supported formats. <code>stroke.width</code> A numerical value representing the width of the stroke in pixels. <code>left, right, top, bottom</code> Boundaries of the actor."},{"location":"classes/actor/#methods","title":"Methods","text":""},{"location":"classes/actor/#draw","title":"draw()","text":"<p>The draw() method is responsible for rendering the actor onto the canvas based on its current properties.</p> <p>Example</p> <pre><code>import { start, setup, clear, canvas, actor } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 1);\n\nlet size = 256\nlet x = canvas.width / 2 - size/2\nlet y = canvas.height / 2 - size/2\n\nlet actor1 = new actor(\"/source/images/bunny.png\", [x, y], [size, size], [0, 0])\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear()\n    actor1.draw()\n})\n\nstart()\n</code></pre> <p></p>"},{"location":"classes/actor/#drawanchorpoint","title":"<code>drawAnchorPoint()</code>","text":"<p>The drawAnchorPoint() method renders an anchor point for the actor on the canvas. (anchor point is from where the actor rotates)</p> <p>Tip</p> <p>Anchor Point can be offseted with offsetX, offsetY</p> <p>Example</p> <pre><code>import { start, setup, clear, canvas, actor } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 1);\n\nlet size = 256\nlet x = canvas.width / 2 - size/2\nlet y = canvas.height / 2 - size/2\n\nlet actor1 = new actor(\"/source/images/bunny.png\", [x, y], [size, size], [0, 0])\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear()\n    actor1.draw()\n    actor1.drawAnchorPoint()\n})\n\nstart()\n</code></pre> <p></p>"},{"location":"classes/actor/#angletopointpoint","title":"<code>angletopoint(point)</code>","text":"<p>The method determines the angle between the actor's current position and the specified target point and makes the actor angle toward the point, considering the actor's center as the reference for now until the offset is added in.</p> Parameters Type Description Default Value point <code>number[]</code> The pos of the point -"},{"location":"classes/actor/#changeimagestring","title":"<code>changeImage(string)</code>","text":"<p>Changes the image/color of the actor.</p> Parameters Type Description Default Value string <code>string</code> Image URL or color code format. -"},{"location":"classes/actor/#movesteps","title":"<code>move(steps)</code>","text":"<p>If the number of steps is positive, the sprite will move forward in the direction it's facing.</p> Parameters Type Description Default Value steps <code>number</code> Amount of pixels to move -"},{"location":"classes/actor/#flipaxis","title":"<code>flip(axis)</code>","text":"<p>Flips the actor on a specified axis.</p> <p>Note</p> <p>Use this as the values for axis horizontal, h, x, vertical, v or y.</p> <p>Valid axis: horizontal, h, x, vertical, v or y.</p> Parameters Type Description Default Value axis <code>string</code> The axis to flip the actor from -"},{"location":"classes/actor/#growx-y","title":"<code>grow(x, y)</code>","text":"<p>Increases or decreases the size of the actor.</p> Parameters Type Description Default Value x <code>number</code> Amount by which to increase width - y <code>number</code> Amount by which to increase height -"},{"location":"classes/button/","title":"Button","text":"<pre><code>new button(string, [x, y], [width, height],text, fontFamily, textColor, textMargin, timeoutMS)\n</code></pre> Parameters Type Description Default Value string <code>string</code> Image URL or color code format. \"color:#FFFFFF\" [x, y] <code>number[]</code> The top left position of the button in pixels. [0, 0] [width, height] <code>number[]</code> The width and height of the button in pixels. [64, 16] text <code>string</code> The text of the button, if undefined it will be disabled. \"Button\" fontFamily <code>string</code> The fontFamily for the button text. \"sans-serif\" textColor <code>string</code> The color of the text \"#FFFFFF\" textMargin <code>number</code> The margin of the text 0 timeoutMS <code>number</code> The time it takes for the button to be able to be pressed again . 0"},{"location":"classes/button/#attributes","title":"Attributes","text":"Attributes Description <code>image</code> Holds the image object if an image source is provided. <code>usingColor</code> Indicates whether the button is using a color instead of an image. <code>color</code> Holds the color value if the button is using a color. <code>x, y</code> Current position of the button. <code>width, height</code> Dimensions of the button. <code>halfwidth, halfheight</code> Half of the width and height of the button. <code>pos</code> Position coordinates of the button in an array x: [0], y: [1]. <code>text</code> Object for handling text functionality. <code>text.active</code> A boolean flag indicating whether the text should be active/shown or not. <code>text.color</code> Color of the text. <code>text.text</code> The current text of the button. <code>text.size</code> The size in px of the text. <code>text.margin</code> Margin for the text <code>text.fontFamily</code> The fontFamily <code>text.baseline</code> Baseline for text <code>\"top\"</code>, <code>\"middle\"</code>, <code>\"bottom\"</code>, or <code>\"alphabetic\"</code>. <code>text.align</code> Text alignment: <code>\"start\"</code>, <code>\"end\"</code>, <code>\"left\"</code>, <code>\"right\"</code>, or <code>\"center\"</code>. <code>text.stroke.active</code> A boolean flag indicating whether the stroke (outline) should be active or not. <code>text.stroke.color</code> A string representing the color of the stroke in hexadecimal, RGB, or other supported formats. <code>text.stroke.width</code> A numerical value representing the width of the stroke in pixels. <code>click</code> Boolean that indicates if its being clicked. <code>hover</code> Boolean that indicates if its being hovered. <code>hitbox</code> Hitbox object for collision detection. <code>anglex, angley</code> Position coordinates used for positioning calculations. Has nothing in common with angle ! <code>angle</code> Angle of rotation for the button (in degrees). <code>alpha</code> Transparency of the button. <code>radius</code> The amount of rounding corners use array for changing independently each corner or a number to change all corners. <code>stroke.active</code> A boolean flag indicating whether the stroke (outline) should be active or not. <code>stroke.color</code> A string representing the color of the stroke in hexadecimal, RGB, or other supported formats. <code>stroke.width</code> A numerical value representing the width of the stroke in pixels. <code>left, right, top, bottom</code> Boundaries of the button. <code>timeout</code> The timeout object. When clicked it will activate and while active the click var will stay false."},{"location":"classes/button/#methods","title":"Methods","text":""},{"location":"classes/button/#draw","title":"<code>draw()</code>","text":"<p>The draw() method is responsible for rendering the button onto the canvas based on its current properties.</p> <p>Example</p> <pre><code>import { start, setup, clear, canvas, button, ctx, drawtext } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 1);\n\nlet size = 256\nlet x = canvas.width / 2 - size\nlet y = canvas.height / 2 - size / 2\n\nlet MyButton = new button(\"color: #5a5a5a\", [x, y], [size * 2, size], \"My Button\", \"sans-serif\", \"#FFFFFF\", size * 0.5, 500)\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear()\n    MyButton.draw()\n    // If MyButton is hovered it will change color\n    //if (MyButton.hover) {\n    //    MyButton.color = \"#FF0000\"\n    //}\n    //else {\n    //    MyButton.color = \"#5a5a5a\"\n    //}\n\n    // If MyButton is clicked it will say Timeout and when its ready to click again is gonna say Can Click\n    //if(!MyButton.timeout.active){\n    //    ctx.fillStyle = \"#00FF00\"\n    //    drawtext(\"Can Click\",[0,0],size*0.3)\n    //}\n    //else{\n    //    ctx.fillStyle = \"#FF0000\"\n    //    drawtext(\"Timeout\",[0,0],size*0.3)\n    //}\n})\n\nstart()\n</code></pre> <p></p>"},{"location":"classes/button/#settext","title":"<code>setText()</code>","text":"<p>The setText() method changes the text and fits it to the button with a provided font and text</p> <p>Failure</p> <p>setText() uses fitext that doens't properly fit text with some fonts.</p> Parameters Type Description Default Value text <code>string</code> The text to be changed - fontFamily <code>string</code> The fontFamily that is goind to be changed - <p>Example</p> <pre><code>import { start, setup, clear, canvas, button, ctx, drawtext } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 1);\n\nlet size = 256\nlet x = canvas.width / 2 - size\nlet y = canvas.height / 2 - size / 2\n\nlet MyButton = new button(\"color: #5a5a5a\", [x, y], [size * 2, size], \"My Button\", \"sans-serif\", \"#FFFFFF\", size * 0.5, 500)\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear()\n    MyButton.draw()\n    if (MyButton.click) {\n        if (MyButton.text.text == \"My Button\") {\n            MyButton.setText(\"Super Button\", \"sans-serif\")\n        }\n        else {\n            MyButton.setText(\"My Button\", \"sans-serif\")\n        }\n    }   \n})\n\nstart()\n</code></pre> <p></p> <p></p>"},{"location":"classes/button/#changeimagestring","title":"<code>changeImage(string)</code>","text":"<p>Changes the image/color of the button.</p> Parameters Type Description Default Value string <code>string</code> Image URL or color code format. -"},{"location":"classes/button/#growx-y","title":"<code>grow(x, y)</code>","text":"<p>Increases or decreases the size of the button.</p> Parameters Type Description Default Value x <code>number</code> Amount by which to increase width - y <code>number</code> Amount by which to increase height -"},{"location":"classes/hitbox/","title":"Hitbox","text":"<pre><code>new hitbox(that, multiplier, color, offsetX, offsetY)\n</code></pre> Parameters Type Description Default Value that <code>object</code> An object that has x, y, width, height, etc. - multiplier <code>number</code> Indicates the scale of the hitbox 0 being 100% and 1 being 0%. 0 color <code>string</code> The color of the hitbox. undefined offsetX <code>number</code> The horizontal offset for positioning the hitbox. 0 offsetY <code>number</code> The vertical offset for positioning the hitbox. 0 <p>Note</p> <p>If color is <code>undefined</code> it will be randomized</p>"},{"location":"classes/hitbox/#attributes","title":"Attributes","text":"Attributes Description <code>that</code> Holds the image object if an image source is provided. <code>multiplier</code> Indicates the scale of the hitbox. <code>offsetX</code> The horizontal offset used for positioning the hitbox. <code>offsetY</code> The vertical offset used for positioning the hitbox. <code>color</code> The color of the hitbox. <code>lineWidth</code> The width of the stroke for drawing the hitbox. <code>params</code> String that contains hitbox data."},{"location":"classes/hitbox/#methods","title":"Methods","text":""},{"location":"classes/hitbox/#draw","title":"<code>draw()</code>","text":"<p>Renders the hitbox onto the canvas.</p>"},{"location":"classes/hitbox/#updatedimensions","title":"<code>updateDimensions()</code>","text":"<p>Updates the dimensions of the hitbox.</p>"},{"location":"classes/hitbox/#collidehitbox","title":"<code>collide(hitbox)</code>","text":"<p>Checks collision between two hitboxes. If they are colliding returns <code>true</code> else returns <code>false</code></p> Parameters Type Description Default Value hitbox <code>object</code> The hitbox object -"},{"location":"classes/hitbox/#collide2hitbox","title":"<code>collide2(hitbox)</code>","text":"<p>Checks collision between hitbox and hitbox 2. </p> Parameters Type Description Default Value hitbox <code>object</code> The hitbox2 object -"},{"location":"classes/hitbox/#collidepointpoint","title":"<code>collidepoint(point)</code>","text":"<p>Checks collision with a single point. </p> Parameters Type Description Default Value point <code>number[]</code> An array containing x and y of the point -"},{"location":"classes/hitbox2/","title":"Hitbox2","text":"<pre><code>new hitbox2(x, y, width, height)\n</code></pre> Parameters Type Description Default Value x <code>number</code> x position for the hitbox undefined y <code>number</code> y position for the hitbox undefined width <code>number</code> width of the hitbox undefined height <code>number</code> height of the hitbox undefined <p>Note</p> <p>Color is randomized, but can be changed.</p>"},{"location":"classes/hitbox2/#attributes","title":"Attributes","text":"Attributes Description x x position for the hitbox y y position for the hitbox width width of the hitbox height height of the hitbox <code>color</code> The color of the hitbox. <code>lineWidth</code> The width of the stroke for drawing the hitbox. <code>params</code> Object for handling update instructions."},{"location":"classes/hitbox2/#methods","title":"Methods","text":""},{"location":"classes/hitbox2/#draw","title":"<code>draw()</code>","text":"<p>Renders the hitbox onto the canvas.</p>"},{"location":"classes/hitbox2/#updatedimensions","title":"<code>updateDimensions()</code>","text":"<p>Updates the dimensions of the hitbox.</p>"},{"location":"classes/hitbox2/#collidehitbox","title":"<code>collide(hitbox)</code>","text":"<p>Checks collision between hitbox2 and hitbox. If they are colliding returns <code>true</code> else returns <code>false</code></p> Parameters Type Description Default Value hitbox <code>object</code> The hitbox object -"},{"location":"classes/hitbox2/#collide2hitbox","title":"<code>collide2(hitbox)</code>","text":"<p>Checks collision between hitbox2 and hitbox2. </p> Parameters Type Description Default Value hitbox <code>object</code> The hitbox2 object -"},{"location":"classes/hitbox2/#collidepointpoint","title":"<code>collidepoint(point)</code>","text":"<p>Checks collision with a single point. </p> Parameters Type Description Default Value point <code>number[]</code> An array containing x and y of the point -"},{"location":"classes/hitboxCircle/","title":"HitboxCircle","text":"<pre><code>new hitboxCircle(x, y, radius)\n</code></pre> Parameters Type Description Default Value x <code>number</code> The center of the circle in the x-axis - y <code>number</code> The center of the circle in the y-axis - radius <code>number</code> The radius of the circle in px - <p>Note</p> <p>Color is randomized, but can be changed.</p>"},{"location":"classes/hitboxCircle/#attributes","title":"Attributes","text":"Attributes Description <code>x</code> The x position for the circle. <code>y</code> The y position for the circle. <code>radius</code> The radius of the circle. <code>color</code> The color of the hitbox. <code>lineWidth</code> The width of the stroke for drawing the hitbox."},{"location":"classes/hitboxCircle/#methods","title":"Methods","text":""},{"location":"classes/hitboxCircle/#draw","title":"<code>draw()</code>","text":"<p>Renders the hitbox onto the canvas.</p>"},{"location":"classes/hitboxCircle/#collidehitbox","title":"<code>collide(hitbox)</code>","text":"<p>Checks collision between two hitboxes(hitboxCircle and hitbox). If they are colliding returns <code>true</code> else returns <code>false</code></p> Parameters Type Description Default Value hitbox <code>object</code> The hitbox object -"},{"location":"classes/hitboxCircle/#collide2hitbox","title":"<code>collide2(hitbox)</code>","text":"<p>Checks collision between hitboxCircle and hitbox 2. </p> Parameters Type Description Default Value hitbox <code>object</code> The hitbox2 object -"},{"location":"classes/hitboxCircle/#collidecirclehitbox","title":"<code>collideCircle(hitbox)</code>","text":"<p>Checks collision between two hitboxCircles. </p> Parameters Type Description Default Value hitbox <code>object</code> The hitboxCircle object -"},{"location":"classes/hitboxCircle/#collidepointpoint","title":"<code>collidepoint(point)</code>","text":"<p>Checks collision with a single point. </p> Parameters Type Description Default Value point <code>number[]</code> An array containing x and y of the point -"},{"location":"classes/rect/","title":"Rect","text":"<pre><code>new rect([x, y], [width, height], color)\n</code></pre> Parameters Type Description Default Value [x, y] <code>number[]</code> The top left position of the rect in pixels. [0, 0] [width, height] <code>number[]</code> The width and height of the rect in pixels. [32, 32] color <code>string</code> color undefined <p>Note</p> <p>If color is <code>undefined</code> it will be randomized</p>"},{"location":"classes/rect/#attributes","title":"Attributes","text":"Attributes Description <code>color</code> Holds the color value if the rect is using a color. <code>x, y</code> Current position of the rect. <code>hitbox</code> Hitbox object for collision detection. <code>width, height</code> Dimensions of the rect. <code>halfwidth, halfheight</code> Half of the width and height of the rect. <code>pos</code> Position coordinates of the rect in an array x: [0], y: [1]. <code>anglex, angley</code> Position coordinates used for positioning calculations. Has nothing in common with angle ! <code>angle</code> Angle of rotation for the rect (in degrees). <code>alpha</code> Transparency of the rect. <code>radius</code> The amount of rounding corners use array for changing independently each corner or a number to change all corners. <code>stroke.active</code> A boolean flag indicating whether the stroke (outline) should be active or not. <code>stroke.color</code> A string representing the color of the stroke in hexadecimal, RGB, or other supported formats. <code>stroke.width</code> A numerical value representing the width of the stroke in pixels."},{"location":"classes/rect/#methods","title":"Methods","text":""},{"location":"classes/rect/#draw","title":"draw()","text":"<p>The draw() method is responsible for rendering the rect onto the canvas based on its current properties.</p> <p>Example</p> <pre><code>import { start, setup, clear, canvas, rect } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 1);\n\nlet size = 256\nlet x = canvas.width / 2 - size / 2\nlet y = canvas.height / 2 - size / 2\n\nlet Myrect = new rect([x, y], [size, size], \"#FF00FF\")\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear()\n    Myrect.draw()\n})\n\nstart()\n</code></pre> <p></p>"},{"location":"classes/slider/","title":"Slider","text":"<pre><code>new slider(background, thumb, [x, y], [width, height], thumbwidth, [minpercentage, maxpercentage], sliderfill, currentPercentage)\n</code></pre> Parameters Type Description Default Value background <code>string</code> Image URL or color code representing the background of the slider. \"color: #FF0000\" thumb <code>string</code> Image URL or color code representing the thumb. \"color: #aeaeae\" [x, y] <code>number[]</code> Top left position of the slider in pixels. [0, 0] [width, height] <code>number[]</code> Width and height of the slider in pixels. [64, 16] thumbwidth <code>number</code> Width of the thumb. 16 [minpercentage, maxpercentage] <code>number[]</code> Minimum and maximum percentage values for the slider. [0, 100] sliderFill <code>string</code> Color code representing the fill color of the slider. \"#00FF00\" currentPercentage <code>number</code> The initial percentage value of the slider. 0 Attributes Description <code>background</code> Holds the background image. <code>BGusingColor</code> Indicates whether is using a color instead of an image in background. <code>BGcolor</code> Holds the color value of the slider background if is using a color. <code>thumb.image</code> Holds the thumb image <code>thumb.usingColor</code> Indicates whether is using a color instead of an image for the thumb. <code>thumb.color</code> Holds the color value of the slider thumb if is using a color. <code>thumb.x, thumb.y</code> Current position of the thumb. <code>thumb.height</code> Height of the thumb <code>thumb.width</code> Width of the thumb <code>thumb.stroke.active</code> A boolean flag indicating whether the stroke (outline) should be active or not. <code>thumb.stroke.color</code> A string representing the color of the stroke in hexadecimal, RGB, or other supported formats. <code>thumb.stroke.width</code> A numerical value representing the width of the stroke in pixels. <code>thumb.blocked</code> Boolean that blocks movement if its true <code>thumb.radius</code> The amount of rounding corners use array for changing independently each corner or a number to change all corners. `sliderBgColor Holds the color to fill in the percentage. <code>x, y</code> Current position of the slider. <code>maxpercentage</code> The maximum percentage the slider can reach. <code>minpercentage</code> The minimum percentage the slider can reach. <code>percentage</code> Current percentage the slider is in. <code>drag</code> Object for handling dragging functionality. More info at <code>template/drag</code> in github. <code>hitbox</code> Hitbox object for collision detection. <code>width, height</code> Dimensions of the slider. <code>pos</code> Position coordinates of the actor in an array x: [0], y: [1]. <code>anglex, angley</code> Position coordinates used for positioning calculations. Has nothing in common with angle ! <code>angle</code> Angle of rotation for the slider (in degrees). <code>alpha</code> Transparency of the actor. <code>radius</code> The amount of rounding corners use array for changing independently each corner or a number to change all corners. <code>stroke.active</code> A boolean flag indicating whether the stroke (outline) should be active or not. <code>stroke.color</code> A string representing the color of the stroke in hexadecimal, RGB, or other supported formats. <code>stroke.width</code> A numerical value representing the width of the stroke in pixels. <code>left, right, top, bottom</code> Boundaries of the actor. <code>click</code> Boolean that indicates if the thumb is being clicked. <code>hover</code> Boolean that indicates if the thumb is being hovered."},{"location":"classes/slider/#methods","title":"Methods","text":""},{"location":"classes/slider/#draw","title":"draw()","text":"<p>The draw() method is responsible for rendering the slider onto the canvas based on its current properties.</p> <p>Example</p> <pre><code>import { start, setup, clear, slider, canvas, drawtext, ctx } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 1);\n\nlet size = 256\nlet x = canvas.width / 2 - size\nlet y = canvas.height / 2 - size / 4\n\nlet MySlider = new slider(\"color:#3a3a3a\", \"color:#FFFFFF\", [x, y], [size * 2, size / 2], size / 4, [0, 100], \"#ff0000\", 50)\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear()\n    MySlider.draw()\n    ctx.fillStyle = \"#FFFFFF\"\n    drawtext(MySlider.percentage, [size / 8, size / 8], size / 4)\n})\n\nstart()\n</code></pre> <p>Untouched</p> <p></p> <p>Moved</p> <p></p>"},{"location":"classes/slider/#changeimagestringbackground-stringthumb","title":"<code>changeImage(stringbackground, stringthumb)</code>","text":"<p>Changes the image/color of the slider.</p> Parameters Type Description Default Value stringbackground <code>string</code> Image URL or color code representing the background. - stringthumb <code>string</code> Image URL or color code representing the thumb -"},{"location":"classes/sound/","title":"Sound","text":"<pre><code>new sound(url, playbackRate, volume, loop)\n</code></pre> Parameters Type Description Default Value url <code>string</code> Sound URL - playbackRate <code>number</code> Play back rate. 1.0 volume <code>number</code> The volume of the sound 1.0 loop <code>boolean</code> Wheter it loop or not [0, 0]"},{"location":"classes/sound/#attributes","title":"Attributes","text":"Attributes Description <code>sound</code> An Audio object. <code>loop</code> Indicates whether the sound will loop. <code>playbackRate</code> Rate at which the audio will be played. <code>volume</code> Volume level of the audio. <code>ended</code> Indicates if the audio has ended. <code>duration</code> Duration of the audio in seconds. <code>currentTime</code> Current playback time of the audio. <code>paused</code> Indicates if the audio is paused."},{"location":"classes/sound/#methods","title":"Methods","text":""},{"location":"classes/sound/#play","title":"play()","text":"<p>Starts playing the audio </p>"},{"location":"classes/sound/#pause","title":"pause()","text":"<p>Pauses the audio</p>"},{"location":"classes/sound/#stop","title":"stop()","text":"<p>Stops the audio and sets the currentTime to 0</p>"},{"location":"classes/sound/#setcurrenttimeseconds","title":"setCurrentTime(seconds)","text":"<p>Sets the current time in seconds</p>"},{"location":"classes/sound2/","title":"Sound2","text":"<pre><code>new sound2(src, playbackRate, volume)\n</code></pre> Parameters Type Description Default Value src <code>string</code> Sound URL - playbackRate <code>number</code> Play back rate. 1.0 volume <code>number</code> The volume of the sound 1.0"},{"location":"classes/sound2/#attributes","title":"Attributes","text":"Attributes Description <code>audioSrc</code> Hold the audio src. <code>playbackRate</code> Rate at which the audio will be played. <code>volume</code> Volume level of the audio. <code>audioClones</code> Hold every sound object that is playing"},{"location":"classes/sound2/#methods","title":"Methods","text":""},{"location":"classes/sound2/#play","title":"play()","text":"<p>Creates a new audio object and starts playing it.</p>"},{"location":"classes/sound2/#stopall","title":"stopAll()","text":"<p>Stops all audios in <code>audioClones</code> and empties the array(deletes all audio elemnts)</p>"},{"location":"classes/timeout/","title":"Timeout","text":"<pre><code>new timeout(timeMS)\n</code></pre> Parameters Type Description Default Value timeMS <code>number</code> The time in ms of the delay before it can be started. 1000"},{"location":"classes/timeout/#attributes","title":"Attributes","text":"Attributes Description <code>time</code> The time in ms of the delay before it can be started. <code>active</code> Indicates whether the timeout is active or not. <code>timeElapsed</code> Holds the time elapsed since start() up to timeMS in milliseconds. <code>timeLeft</code> The remaining time in milliseconds before the timeout completes. <code>updateTime</code> The interval in milliseconds for updating <code>timeElapsed</code> and <code>timeLeft</code>. <code>currentTime</code> The timestamp when the timeout was started."},{"location":"classes/timeout/#methods","title":"Methods","text":""},{"location":"classes/timeout/#start","title":"start()","text":"<p>The start() method is responsible for starting the timeout (setting active to true for the time specified).</p> <p>Example</p> <p><pre><code>import { start, setup, clear, timeout, canvas, drawtext, ctx, mouse } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 1);\n\nlet size = 48\nlet x = canvas.width / 2\nlet y = canvas.height / 2\n\nlet MyTimeout = new timeout(1500)\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear()\n    if (mouse.click &amp;&amp; !MyTimeout.active) {\n        MyTimeout.start()\n    }\n    if (MyTimeout.active) {\n        ctx.fillStyle = \"#FF0000\"\n    }\n    else {\n        ctx.fillStyle = \"#00FF00\"\n    }\n    drawtext(MyTimeout.active, [x, y], size, \"sans-serif\", \"middle\", \"center\")\n    drawtext(Math.round(MyTimeout.timeLeft / 100) / 10, [x, y + size], size, \"sans-serif\", \"middle\", \"center\")\n})\n\nstart()\n</code></pre> Before Clicking  After clicked and 1 second before reseting  After 1.5 seconds reseted again </p>"},{"location":"functions/general/","title":"General","text":""},{"location":"functions/general/#load-image","title":"Load Image","text":"<p>The <code>loadImage</code> function downloads an image from a provided URL and returns the src.</p> <pre><code>loadImage(name,url);\n</code></pre> <p>Info</p> <p>The <code>loadImage</code> function is already implemented into all classes from PizzaJS.</p> Parameters Type Description Default Value name <code>string</code> A name attached to the url accesible via image[name] - url <code>string</code> The URL pointing to the image file to be downloaded and used. - <p>Example</p> <pre><code>import { start, setup, clear, canvas, actor, loadImage, image } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 1);\n\nlet size = 256\nlet x = canvas.width / 2 - size/2\nlet y = canvas.height / 2 - size/2\n\n// loadImage(\"bunny,\"bunny.png\")\n// All classes that have an image or may contain one -\n// already have implemented the loadImage function.\n\nlet actor1 = new actor(\"/source/images/bunny.png\", [x, y], [size, size], [0, 0])\n\n// Using name\n//let actor = new actor(image[\"bunny\"], [x, y], [size, size], [0, 0])\n\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear()\n    actor1.draw()\n})\n\nstart()\n</code></pre> <p></p>"},{"location":"functions/general/#load-sound","title":"Load Sound","text":"<p>The <code>loadSound</code> function downloads a sound from a provided URL and returns the src.</p> <pre><code>loadSound(url);\n</code></pre> <p>Info</p> <p>The <code>loadSound</code> function is already implemented into the sound's classes from PizzaJS.</p> Parameters Type Description Default Value url <code>string</code> The URL pointing to the sound file to be downloaded and used. -"},{"location":"functions/general/#clear","title":"Clear","text":"<p>The <code>clear</code> function erases all things from the canvas. Additionaly it broadcast an event after clearing <code>pjsAfterClear</code>, meant for addons </p> <pre><code>clear();\n</code></pre>"},{"location":"functions/general/#fill-rect","title":"Fill Rect","text":"<p>The <code>fillRect</code> function draws a filled rect with the specified parameters.</p> <pre><code>fillRect(x, y, width, height);\n</code></pre> Parameters Type Description Default Value x <code>number</code> the x position for the rect 0 y <code>number</code> the y position for the rect 0 width <code>number</code> the width of the rect 0 height <code>number</code> the height of the rect 0 <p>Example</p> <pre><code>import { start, setup, clear, ctx, fillRect } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 1);\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear();\n    ctx.fillStyle = \"red\";\n    fillRect(64, 64, 128, 128);\n})\n\nstart()\n</code></pre> <p></p>"},{"location":"functions/general/#shake-screen","title":"Shake Screen","text":"<p>The <code>shakeScreen</code> function shakes the screen with a duration and time specified.</p> <pre><code>shakeScreen(intensity, duration);\n</code></pre> Parameters Type Description Default Value intensity <code>number</code> The intensity of the shake. - duration <code>number</code> Duration in ms. -"},{"location":"functions/initialize/","title":"Initialize","text":""},{"location":"functions/initialize/#setup","title":"Setup","text":"<p>The <code>setup</code> function is used to configure and set up a canvas with specific width, height, and other configurations. When executed a frame should appear on the web browser.</p> <p>If you dont want the canvas to stick to the sides of the screen add any float to reduce the size but maintaining the pixels resolution  (from 0 to 1)</p> <pre><code>setup(width, height, marginMultiplier, listeners);\n</code></pre> Parameters Type Description Default Value width <code>number</code> The width of the canvas. - height <code>number</code> The height of the canvas. - marginMultiplier <code>number</code> The multiplier for adjusting margin. 1 listeners <code>boolean</code> Boolean to determine whether to set up listeners. true <p>Example</p> <pre><code>import { start, setup, clear } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 1, false)\n</code></pre> <p></p>"},{"location":"functions/initialize/#start","title":"Start","text":"<p>The <code>start</code> function initiates the main loop.</p> <pre><code>start();\n</code></pre> <p>Example</p> <pre><code>import { start, setup, clear } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 1, false)\n\nwindow.addEventListener(\"pjsUpdate\", (e) =&gt; {\n    const { deltaTime, fps } = e.detail // Get current deltaTime and FrameRate. This can be replaced by time.delta and 1 / time.delta\n    clear()\n})\n\nstart()\n</code></pre>"},{"location":"functions/text/","title":"Text","text":""},{"location":"functions/text/#draw-text","title":"Draw Text","text":"<p>The <code>drawtext</code> function is used to draw text on the canvas with specified parameters.</p> <pre><code>drawtext(text, [x, y], fontSize, fontFamily, baseline, textAlign, angle, alpha);\n</code></pre> Parameters Type Description Default Value text <code>string</code> The text to be drawn. \"undefined\" [x, y] <code>number[]</code> The coordinates [x, y] where the text will be drawn. [0, 0] fontSize <code>number</code> The size of the font in pixels. 24 fontFamily <code>string</code> The font family to use. \"sans-serif\" baseline <code>string</code> The text baseline: <code>\"top\"</code>, <code>\"middle\"</code>, <code>\"bottom\"</code>, or <code>\"alphabetic\"</code>. \"top\" textAlign <code>string</code> The text alignment: <code>\"start\"</code>, <code>\"end\"</code>, <code>\"left\"</code>, <code>\"right\"</code>, or <code>\"center\"</code>. \"start\" angle <code>number</code> The rotation angle of the text in degrees. 0 alpha <code>number</code> The global alpha (transparency) value, between <code>0.0</code> and <code>1.0</code>. 1.0 <p>Example</p> <pre><code>import { start, setup, clear, ctx, drawtext, loadFont, canvas } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 0.9)\n\nlet x = canvas.width / 2\nlet y = canvas.height / 2\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear()\n    ctx.fillStyle = \"white\"\n    drawtext(\"Hello, world\", [x, y], 64, \"sans-serif\", \"middle\", \"center\", 15, 1);\n})\n\nstart()\n</code></pre> <p></p>"},{"location":"functions/text/#load-font","title":"Load Font","text":"<p>The loadFont function asynchronously downloads a font from a provided URL and adds it to the document's fonts using the specified font family.</p> <pre><code>loadFont(fontFamily, fontURL);\n</code></pre> Parameters Type Description Default Value fontFamily <code>string</code> The font family name to assign to the loaded font. \"undefined\" fontURL <code>string</code> The URL pointing to the font file to be downloaded and used. \"undefined\" <p>Example</p> <pre><code>import { start, setup, clear, ctx, drawtext, loadFont, canvas } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\n\nsetup(1920, 1080, 0.9)\n\nloadFont(\"FiraCode\", \"/source/fonts/FiraCode/FiraCode-Regular.ttf\")\n\nlet x = canvas.width / 2\nlet y = canvas.height / 2\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear()\n    ctx.fillStyle = \"white\"\n    drawtext(\"Hello, world\", [x, y], 64, \"FiraCode\", \"middle\", \"center\", 15, 1);\n})\n\nstart()\n</code></pre> <p></p>"},{"location":"functions/text/#fit-text","title":"Fit Text","text":"<p>Failure</p> <p>Doens't properly fit text in some cases.</p> <p>Tries to fit a text with the sepecified width, height and other parameters.</p> <p>Returns the fontSize tha will fit with the provided data.</p> <pre><code>fitText(text, width, height, fontFamily);\n</code></pre> Parameters Type Description Default Value text <code>string</code> The text . - width <code>number</code> The size of the max width the text can be in. - height <code>number</code> The size of the max height the text can be in. - fontFamily <code>string</code> The font family used for measuring the text. -"},{"location":"functions/text/#measure-text-width","title":"Measure Text Width","text":"<p>The measureTextWidth function calculates the width of a provided text string with a specified font size and font family.</p> <pre><code>measureTextWidth(text, fontSize, fontFamily);\n</code></pre> Parameters Type Description Default Value text <code>string</code> The text to be measured. \"undefined\" fontSize <code>number</code> The size of the font in pixels. 24 fontFamily <code>string</code> The font family used for measuring the text. \"sans-serif\""},{"location":"listeners/listeners/","title":"Listeners","text":""},{"location":"listeners/listeners/#mouse-object","title":"Mouse object","text":"variables Description <code>x</code> Indicates the mouse position in the x axis. <code>y</code> Indicates the mouse position in the y axis. <code>show</code> Indicates if the mouse should be shown or not. default: true. <code>pos</code> An array with x and y. <code>preventRightClick</code> Whether it should prevent contexMenu or not. <code>click</code> Is true if the mouse is being clicked and its false when its not clicked. (Supports touch but no dragging) <code>holding</code> Indicates if the mouse is being hold <code>objectSelected</code> It has the object / class currently selected. (To understand more via discord or template code <code>template/dragTemplate.js</code>) <p>Example</p> <p><pre><code>console.log(mouse.pos);\n</code></pre> output: [125,253]</p>"},{"location":"listeners/listeners/#prevent-keys","title":"Prevent Keys","text":"<p>An array that hold all keys that the listener shouldn't be listening. default  value: [\"F1\" ,\"F2\", \"F3\", \"F4\", \"F5\", \"F6\", \"F7\", \"F8\", \"F9\", \"F10\", \"F11\", \"F12\"]</p>"},{"location":"listeners/listeners/#key-pressed","title":"Key pressed","text":"<pre><code>keyPressed(key);\n</code></pre> <p>Return true if the key given is being pressed.</p> Parameters Type Description Default Value key <code>string</code> The key you want to know if its pressed - <p>Example</p> <p><pre><code>import { start, setup, clear, ctx, keyPressed, canvas, drawtext } from \"/source/modules/index.js\"\nimport \"/source/Addons/DefaultScreenshot.js\"\n\nsetup(1920, 1080, 1);\n\nlet size = 48\nlet x = canvas.width / 2\nlet y = canvas.height / 2\n\nwindow.addEventListener(\"pjsUpdate\", () =&gt; {\n    clear()\n    if (keyPressed(\"w\")) {\n        ctx.fillStyle = \"#55FF55\"\n        drawtext(\"W pressed\", [x, y], size, \"sans-serif\", \"middle\", \"center\")\n    }\n    else {\n        ctx.fillStyle = \"#FF5555\"\n        drawtext(\"W not pressed\", [x, y], size, \"sans-serif\", \"middle\", \"center\")\n    }\n})\n\nstart()\n</code></pre> Not pressing W </p> <p>Pressing W </p>"},{"location":"listeners/listeners/#set-up-listeners","title":"Set up listeners","text":"<p>When putting <code>setup(1920,1080,1,false)</code> you are disabling automatic initialization of listeners. If you want to do it manually just use <code>setupAllEventListeners()</code></p> <p>Example</p> <pre><code>import { start, setupAllEventListeners, setupMouseListener, setupKeyboardListener, setupResizeListener } from \"/source/modules/index.js\"\n\nsetup(1920, 1080, 1, false); // start a canvas without the event listeners\n\nsetupAllEventListeners() // Initialize all event listeners\n\n// setupMouseListener() for setting up only the mouse.\n\n// setupKeyboardListener() for setting up only the keyboard and keyPressed function.\n\n// setupResizeListener() for setting up the automatic resize of the game when the windows is resized.\n</code></pre>"}]}